/*! For license information please see ef467042.274158f6.js.LICENSE.txt */
"use strict";(self.webpackChunkbackstage_microsite=self.webpackChunkbackstage_microsite||[]).push([[382465],{326714:(e,c,r)=>{r.r(c),r.d(c,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>l});var n=r(785893),t=r(511151);const s={id:"plugin-search-backend-module-elasticsearch.isopensearchcompatible",title:"isOpenSearchCompatible",description:"API reference for isOpenSearchCompatible"},a=void 0,i={id:"reference/plugin-search-backend-module-elasticsearch.isopensearchcompatible",title:"isOpenSearchCompatible",description:"API reference for isOpenSearchCompatible",source:"@site/../docs/reference/plugin-search-backend-module-elasticsearch.isopensearchcompatible.md",sourceDirName:"reference",slug:"/reference/plugin-search-backend-module-elasticsearch.isopensearchcompatible",permalink:"/docs/next/reference/plugin-search-backend-module-elasticsearch.isopensearchcompatible",draft:!1,unlisted:!1,editUrl:"https://github.com/backstage/backstage/edit/master/docs/../docs/reference/plugin-search-backend-module-elasticsearch.isopensearchcompatible.md",tags:[],version:"current",frontMatter:{id:"plugin-search-backend-module-elasticsearch.isopensearchcompatible",title:"isOpenSearchCompatible",description:"API reference for isOpenSearchCompatible"}},o={},l=[];function p(e){const c={a:"a",code:"code",p:"p",pre:"pre",strong:"strong",...(0,t.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(c.p,{children:[(0,n.jsx)(c.a,{href:"/docs/next/reference/",children:"Home"})," > ",(0,n.jsx)(c.a,{href:"/docs/next/reference/plugin-search-backend-module-elasticsearch",children:(0,n.jsx)(c.code,{children:"@backstage/plugin-search-backend-module-elasticsearch"})})," > ",(0,n.jsx)(c.a,{href:"/docs/next/reference/plugin-search-backend-module-elasticsearch.isopensearchcompatible",children:(0,n.jsx)(c.code,{children:"isOpenSearchCompatible"})})]}),"\n",(0,n.jsxs)(c.p,{children:["Typeguard to differentiate ElasticSearch client options which are compatible with OpenSearch vs. ElasticSearch clients. Useful when calling the ",(0,n.jsx)(c.a,{href:"/docs/next/reference/plugin-search-backend-module-elasticsearch.elasticsearchsearchengine.newclient",children:"ElasticSearchSearchEngine.newClient()"})," method."]}),"\n",(0,n.jsx)(c.p,{children:(0,n.jsx)(c.strong,{children:"Signature:"})}),"\n",(0,n.jsx)(c.pre,{children:(0,n.jsx)(c.code,{className:"language-typescript",children:"isOpenSearchCompatible: (opts: ElasticSearchClientOptions) => opts is OpenSearchElasticSearchClientOptions\n"})})]})}function h(e={}){const{wrapper:c}={...(0,t.a)(),...e.components};return c?(0,n.jsx)(c,{...e,children:(0,n.jsx)(p,{...e})}):p(e)}},675251:(e,c,r)=>{var n=r(667294),t=Symbol.for("react.element"),s=Symbol.for("react.fragment"),a=Object.prototype.hasOwnProperty,i=n.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,o={key:!0,ref:!0,__self:!0,__source:!0};function l(e,c,r){var n,s={},l=null,p=null;for(n in void 0!==r&&(l=""+r),void 0!==c.key&&(l=""+c.key),void 0!==c.ref&&(p=c.ref),c)a.call(c,n)&&!o.hasOwnProperty(n)&&(s[n]=c[n]);if(e&&e.defaultProps)for(n in c=e.defaultProps)void 0===s[n]&&(s[n]=c[n]);return{$$typeof:t,type:e,key:l,ref:p,props:s,_owner:i.current}}c.Fragment=s,c.jsx=l,c.jsxs=l},785893:(e,c,r)=>{e.exports=r(675251)},511151:(e,c,r)=>{r.d(c,{Z:()=>i,a:()=>a});var n=r(667294);const t={},s=n.createContext(t);function a(e){const c=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(c):{...c,...e}}),[c,e])}function i(e){let c;return c=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),n.createElement(s.Provider,{value:c},e.children)}}}]);