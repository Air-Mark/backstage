/*! For license information please see 8dedb66e.3ac8bc63.js.LICENSE.txt */
"use strict";(self.webpackChunkbackstage_microsite=self.webpackChunkbackstage_microsite||[]).push([[638498],{980413:(e,r,c)=>{c.r(r),c.d(r,{assets:()=>o,contentTitle:()=>t,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var n=c(785893),s=c(511151);const a={id:"plugin-search-backend-module-elasticsearch.isopensearchcompatible",title:"isOpenSearchCompatible",description:"API reference for isOpenSearchCompatible"},t=void 0,i={id:"reference/plugin-search-backend-module-elasticsearch.isopensearchcompatible",title:"isOpenSearchCompatible",description:"API reference for isOpenSearchCompatible",source:"@site/versioned_docs/version-stable/reference/plugin-search-backend-module-elasticsearch.isopensearchcompatible.md",sourceDirName:"reference",slug:"/reference/plugin-search-backend-module-elasticsearch.isopensearchcompatible",permalink:"/docs/reference/plugin-search-backend-module-elasticsearch.isopensearchcompatible",draft:!1,unlisted:!1,editUrl:"https://github.com/backstage/backstage/edit/master/docs/versioned_docs/version-stable/reference/plugin-search-backend-module-elasticsearch.isopensearchcompatible.md",tags:[],version:"stable",frontMatter:{id:"plugin-search-backend-module-elasticsearch.isopensearchcompatible",title:"isOpenSearchCompatible",description:"API reference for isOpenSearchCompatible"}},o={},l=[];function p(e){const r={a:"a",code:"code",p:"p",pre:"pre",strong:"strong",...(0,s.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(r.p,{children:[(0,n.jsx)(r.a,{href:"/docs/reference/",children:"Home"})," > ",(0,n.jsx)(r.a,{href:"/docs/reference/plugin-search-backend-module-elasticsearch",children:(0,n.jsx)(r.code,{children:"@backstage/plugin-search-backend-module-elasticsearch"})})," > ",(0,n.jsx)(r.a,{href:"/docs/reference/plugin-search-backend-module-elasticsearch.isopensearchcompatible",children:(0,n.jsx)(r.code,{children:"isOpenSearchCompatible"})})]}),"\n",(0,n.jsxs)(r.p,{children:["Typeguard to differentiate ElasticSearch client options which are compatible with OpenSearch vs. ElasticSearch clients. Useful when calling the ",(0,n.jsx)(r.a,{href:"/docs/reference/plugin-search-backend-module-elasticsearch.elasticsearchsearchengine.newclient",children:"ElasticSearchSearchEngine.newClient()"})," method."]}),"\n",(0,n.jsx)(r.p,{children:(0,n.jsx)(r.strong,{children:"Signature:"})}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-typescript",children:"isOpenSearchCompatible: (opts: ElasticSearchClientOptions) => opts is OpenSearchElasticSearchClientOptions\n"})})]})}function d(e={}){const{wrapper:r}={...(0,s.a)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(p,{...e})}):p(e)}},675251:(e,r,c)=>{var n=c(667294),s=Symbol.for("react.element"),a=Symbol.for("react.fragment"),t=Object.prototype.hasOwnProperty,i=n.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,o={key:!0,ref:!0,__self:!0,__source:!0};function l(e,r,c){var n,a={},l=null,p=null;for(n in void 0!==c&&(l=""+c),void 0!==r.key&&(l=""+r.key),void 0!==r.ref&&(p=r.ref),r)t.call(r,n)&&!o.hasOwnProperty(n)&&(a[n]=r[n]);if(e&&e.defaultProps)for(n in r=e.defaultProps)void 0===a[n]&&(a[n]=r[n]);return{$$typeof:s,type:e,key:l,ref:p,props:a,_owner:i.current}}r.Fragment=a,r.jsx=l,r.jsxs=l},785893:(e,r,c)=>{e.exports=c(675251)},511151:(e,r,c)=>{c.d(r,{Z:()=>i,a:()=>t});var n=c(667294);const s={},a=n.createContext(s);function t(e){const r=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),n.createElement(a.Provider,{value:r},e.children)}}}]);